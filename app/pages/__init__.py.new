"""
Page components for the iROILS Evaluations application.

This package provides the Streamlit page components for the application.
"""

import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional

import streamlit as st

from app.core.session import SessionState
from app.models.user import User
from app.services.auth_service import AuthService


class BasePage(ABC):
    """
    Base class for all page components.
    
    This abstract class defines the common interface and functionality
    for all page components in the application.
    """
    
    def __init__(self, title: str):
        """
        Initialize the page.
        
        Args:
            title (str): The page title
        """
        self.title = title
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.session = SessionState(st.session_state)
    
    def render(self) -> None:
        """
        Render the page.
        
        This method handles common page rendering tasks like setting the title
        and providing a consistent structure.
        """
        st.title(self.title)
        
        # Delegate to the specific page implementation
        self._render_content()
    
    @abstractmethod
    def _render_content(self) -> None:
        """
        Render the page content.
        
        This abstract method must be implemented by subclasses to provide
        the specific content for each page.
        """
        pass
    

class SecurePage(BasePage):
    """
    Base class for pages that require authentication.
    
    This class extends BasePage to add authentication checks
    and access control.
    """
    
    def __init__(self, title: str, auth_service: AuthService, required_role: Optional[str] = None):
        """
        Initialize the secure page.
        
        Args:
            title (str): The page title
            auth_service (AuthService): The authentication service
            required_role (Optional[str]): Required role for access (None for any authenticated user)
        """
        super().__init__(title)
        self.auth_service = auth_service
        self.required_role = required_role
    
    def render(self) -> None:
        """
        Render the page with authentication checks.
        """
        st.title(self.title)
        
        # Check if user is logged in
        if not self.session.get('logged_in', False):
            self._render_login_form()
        else:
            # Check if session has timed out
            if self.auth_service.check_session_timeout(st.session_state):
                st.warning("Your session has expired. Please log in again.")
                self._render_login_form()
                return
            
            # Check role requirements if specified
            user_role = self.session.get('user_role')
            if self.required_role and user_role != self.required_role:
                st.error(f"Access denied: {self.required_role} role required.")
                self._render_logout_button()
                return
            
            # Render page content
            self._render_content()
            
            # Always render logout button
            self._render_logout_button()
    
    def _render_login_form(self) -> None:
        """
        Render the login form.
        """
        st.markdown("## Login")
        
        # Wrap inputs inside a form to enable 'Enter' key submission
        with st.form(key="login_form"):
            username = st.text_input("Username")
            password = st.text_input("Password", type="password")
            submit_button = st.form_submit_button(label="Login")
        
        # Process form submission
        if submit_button:
            try:
                user = self.auth_service.login(st.session_state, username, password)
                st.success(f"Welcome, {user.username}!")
                st.rerun()  # Refresh the page
            except Exception as e:
                st.error(f"Login failed: {str(e)}")
    
    def _render_logout_button(self) -> None:
        """
        Render the logout button.
        """
        if st.button("Logout"):
            self.auth_service.logout(st.session_state)
            st.rerun()  # Refresh the page